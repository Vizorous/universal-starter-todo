# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Node {
  id: ID!
}

type GraphLayout {
  id: ID!
  createdAt: Date!
  updatedAt: Date!

  """GraphLayout  name"""
  name: String!
  description: String
}

type FbUser {
  id: ID!
  createdAt: Date!
  updatedAt: Date!

  """FbUser  name"""
  name: String!
  description: String

  """FB Internal Id of the page"""
  fbInternalUserId: String!

  """Long lived token"""
  token: String

  """Expiration date"""
  tokenExpiryDate: Date
  fbPages(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: FbPageFilter = {}

    """Paginate before opaque cursor"""
    before: ConnectionCursor

    """Paginate after opaque cursor"""
    after: ConnectionCursor

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int

    """Specify to sort results."""
    sorting: [FbPageSort!] = []
  ): FbUserFbPagesConnection
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input FbPageFilter {
  and: [FbPageFilter!]
  or: [FbPageFilter!]
  id: FbPageIdFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: FbPageNameFilterComparison
  fbInternalPageId: FbPageFbInternalPageIdFilterComparison
  fbUser: FbPageFilterFbUserFilter
}

input FbPageIdFilterComparison {
  eq: ID
  in: [ID!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input FbPageNameFilterComparison {
  is: Boolean
  like: String
  in: [String!]
}

input FbPageFbInternalPageIdFilterComparison {
  eq: String
}

input FbPageFilterFbUserFilter {
  and: [FbPageFilterFbUserFilter!]
  or: [FbPageFilterFbUserFilter!]
  id: FbUserIdFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: FbUserNameFilterComparison
  fbInternalUserId: FbUserFbInternalUserIdFilterComparison
}

input FbUserIdFilterComparison {
  eq: ID
  in: [ID!]
}

input FbUserNameFilterComparison {
  is: Boolean
  like: String
  in: [String!]
}

input FbUserFbInternalUserIdFilterComparison {
  eq: String
}

input FbPageSort {
  field: FbPageSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum FbPageSortFields {
  id
  createdAt
  updatedAt
  name
  fbInternalPageId
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type FbPage {
  id: ID!
  createdAt: Date!
  updatedAt: Date!

  """FbPage  name"""
  name: String!

  """FB Internal Id of the page"""
  fbInternalPageId: String!

  """Fb user id"""
  fbUserId: ID!

  """Long lived token"""
  token: String

  """Expiration date"""
  tokenExpiryDate: Date
  fbUser: FbUser!
}

type FbInsightsSource {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  metric: [String!]!
  period: FbDatePreset
  since: String
  until: String
  datePreset: FbDatePreset
  show_description_from_api_doc: Boolean!
  fbPageId: ID!
  fbPage: FbPage!
}

enum FbDatePreset {
  today
  yesterday
  this_month
  last_month
  this_quarter
  maximum
  data_maximum
  last_3d
  last_7d
  last_14d
  last_28d
  last_30d
  last_90d
  last_week_mon_sun
  last_week_sun_sat
  last_quarter
  last_year
  this_week_mon_today
  this_week_sun_today
  this_year
}

type GAnalyticsSource {
  id: ID!
  createdAt: Date!
  updatedAt: Date!

  """GAnalyticsSource  name"""
  name: String!
  description: String
}

type Data {
  x: Date!
  y: Float!
}

type GraphDataset {
  label: String!
  name: String!
  data: [Data!]!
}

type Graph {
  id: ID!
  createdAt: Date!
  updatedAt: Date!

  """Graph  name"""
  name: String!
  description: String
  sectionId: ID!

  """ID of the graph layout"""
  graphLayoutId: ID!

  """ID of the FB Insights Source"""
  fbInsightsSourceId: ID

  """ID of the Google Analytics Source"""
  gAnalyticsSourceId: ID

  """Type of the graph source"""
  graphSourceType: GraphSourceType!
  graphType: String!
  graphDatasets: [GraphDataset]!
  graphLayout: GraphLayout!
  fbInsightsSource: FbInsightsSource!
  gAnalyticsSource: GAnalyticsSource!
}

enum GraphSourceType {
  fbInsights
  googleAnalytics
  linkedIn
}

type Section {
  id: ID!
  createdAt: Date!
  updatedAt: Date!

  """Section name"""
  name: String!

  """Section description"""
  description: String

  """ID of the parent dashboard"""
  dashboardId: ID!

  """Graphs in this section"""
  graphs(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: GraphFilter = {}

    """Paginate before opaque cursor"""
    before: ConnectionCursor

    """Paginate after opaque cursor"""
    after: ConnectionCursor

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int

    """Specify to sort results."""
    sorting: [GraphSort!] = []
  ): SectionGraphsConnection!
}

input GraphFilter {
  and: [GraphFilter!]
  or: [GraphFilter!]
  id: GraphIdFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: GraphNameFilterComparison
}

input GraphIdFilterComparison {
  eq: ID
  in: [ID!]
}

input GraphNameFilterComparison {
  is: Boolean
  like: String
  in: [String!]
}

input GraphSort {
  field: GraphSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum GraphSortFields {
  id
  createdAt
  updatedAt
  name
}

type Dashboard {
  id: ID!
  createdAt: Date!
  updatedAt: Date!

  """Dashboard  name"""
  name: String!
  description: String
  sections(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: SectionFilter = {}

    """Paginate before opaque cursor"""
    before: ConnectionCursor

    """Paginate after opaque cursor"""
    after: ConnectionCursor

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int

    """Specify to sort results."""
    sorting: [SectionSort!] = []
  ): DashboardSectionsConnection
}

input SectionFilter {
  and: [SectionFilter!]
  or: [SectionFilter!]
  id: SectionIdFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: SectionNameFilterComparison
  graphs: SectionFilterGraphFilter
}

input SectionIdFilterComparison {
  eq: ID
  in: [ID!]
}

input SectionNameFilterComparison {
  is: Boolean
  like: String
  in: [String!]
}

input SectionFilterGraphFilter {
  and: [SectionFilterGraphFilter!]
  or: [SectionFilterGraphFilter!]
  id: GraphIdFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: GraphNameFilterComparison
}

input SectionSort {
  field: SectionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SectionSortFields {
  id
  createdAt
  updatedAt
  name
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type DashboardDeleteResponse {
  id: ID
  createdAt: Date
  updatedAt: Date

  """Dashboard  name"""
  name: String
  description: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type DashboardEdge {
  """The node containing the Dashboard"""
  node: Dashboard!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type DashboardConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [DashboardEdge!]!
}

type SectionEdge {
  """The node containing the Section"""
  node: Section!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type DashboardSectionsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [SectionEdge!]!
}

type SectionDeleteResponse {
  id: ID
  createdAt: Date
  updatedAt: Date

  """Section name"""
  name: String

  """Section description"""
  description: String

  """ID of the parent dashboard"""
  dashboardId: ID
}

type SectionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [SectionEdge!]!
}

type GraphEdge {
  """The node containing the Graph"""
  node: Graph!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type SectionGraphsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [GraphEdge!]!
}

type PageFromFb {
  """Name of the page"""
  name: String!

  """Id of the page"""
  id: String!
}

type FbPageDeleteResponse {
  id: ID
  createdAt: Date
  updatedAt: Date

  """FbPage  name"""
  name: String

  """FB Internal Id of the page"""
  fbInternalPageId: String

  """Fb user id"""
  fbUserId: ID

  """Long lived token"""
  token: String

  """Expiration date"""
  tokenExpiryDate: Date
}

type FbPageEdge {
  """The node containing the FbPage"""
  node: FbPage!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type FbPageConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [FbPageEdge!]!
}

type GraphConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [GraphEdge!]!
}

type GraphDeleteResponse {
  id: ID
  createdAt: Date
  updatedAt: Date

  """Graph  name"""
  name: String
  description: String
  sectionId: ID

  """ID of the graph layout"""
  graphLayoutId: ID

  """ID of the FB Insights Source"""
  fbInsightsSourceId: ID

  """ID of the Google Analytics Source"""
  gAnalyticsSourceId: ID

  """Type of the graph source"""
  graphSourceType: GraphSourceType
  graphType: String
  graphDatasets: [GraphDataset!]
}

type GraphLayoutEdge {
  """The node containing the GraphLayout"""
  node: GraphLayout!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type GAnalyticsSourceEdge {
  """The node containing the GAnalyticsSource"""
  node: GAnalyticsSource!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type FbInsightsSourceEdge {
  """The node containing the FbInsightsSource"""
  node: FbInsightsSource!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type FbUserDeleteResponse {
  id: ID
  createdAt: Date
  updatedAt: Date

  """FbUser  name"""
  name: String
  description: String

  """FB Internal Id of the page"""
  fbInternalUserId: String

  """Long lived token"""
  token: String

  """Expiration date"""
  tokenExpiryDate: Date
}

type FbUserEdge {
  """The node containing the FbUser"""
  node: FbUser!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type FbUserConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [FbUserEdge!]!
}

type FbUserFbPagesConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [FbPageEdge!]!
}

"""Date custom scalar type"""
scalar Date

type Query {
  node(id: ID!): Node!
  dashboard(
    """The id of the record to find."""
    id: ID!
  ): Dashboard!
  dashboards(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: DashboardFilter = {}

    """Paginate before opaque cursor"""
    before: ConnectionCursor

    """Paginate after opaque cursor"""
    after: ConnectionCursor

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int

    """Specify to sort results."""
    sorting: [DashboardSort!] = []
  ): DashboardConnection!
  section(
    """The id of the record to find."""
    id: ID!
  ): Section!
  sections(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: SectionFilter = {}

    """Paginate before opaque cursor"""
    before: ConnectionCursor

    """Paginate after opaque cursor"""
    after: ConnectionCursor

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int

    """Specify to sort results."""
    sorting: [SectionSort!] = []
  ): SectionConnection!
  graph(
    """The id of the record to find."""
    id: ID!
  ): Graph!
  graphs(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: GraphFilter = {}

    """Paginate before opaque cursor"""
    before: ConnectionCursor

    """Paginate after opaque cursor"""
    after: ConnectionCursor

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int

    """Specify to sort results."""
    sorting: [GraphSort!] = []
  ): GraphConnection!
  graphWithDatasets(
    """The id of the record to find."""
    id: ID!
  ): Graph!
  pagesFromFb(fbInternalUserId: String!, userToken: String!): [PageFromFb]!
  pageFromFb(pageToken: String!): PageFromFb
  fbPage(
    """The id of the record to find."""
    id: ID!
  ): FbPage!
  fbPages(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: FbPageFilter = {}

    """Paginate before opaque cursor"""
    before: ConnectionCursor

    """Paginate after opaque cursor"""
    after: ConnectionCursor

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int

    """Specify to sort results."""
    sorting: [FbPageSort!] = []
  ): FbPageConnection!
  fbUser(
    """The id of the record to find."""
    id: ID!
  ): FbUser!
  fbUsers(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: FbUserFilter = {}

    """Paginate before opaque cursor"""
    before: ConnectionCursor

    """Paginate after opaque cursor"""
    after: ConnectionCursor

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int

    """Specify to sort results."""
    sorting: [FbUserSort!] = []
  ): FbUserConnection!
}

input DashboardFilter {
  and: [DashboardFilter!]
  or: [DashboardFilter!]
  id: DashboardIdFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: DashboardNameFilterComparison
  sections: DashboardFilterSectionFilter
}

input DashboardIdFilterComparison {
  eq: ID
  in: [ID!]
}

input DashboardNameFilterComparison {
  is: Boolean
  like: String
  in: [String!]
}

input DashboardFilterSectionFilter {
  and: [DashboardFilterSectionFilter!]
  or: [DashboardFilterSectionFilter!]
  id: SectionIdFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: SectionNameFilterComparison
}

input DashboardSort {
  field: DashboardSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DashboardSortFields {
  id
  createdAt
  updatedAt
  name
}

input FbUserFilter {
  and: [FbUserFilter!]
  or: [FbUserFilter!]
  id: FbUserIdFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: FbUserNameFilterComparison
  fbInternalUserId: FbUserFbInternalUserIdFilterComparison
}

input FbUserSort {
  field: FbUserSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum FbUserSortFields {
  id
  createdAt
  updatedAt
  name
  fbInternalUserId
}

type Mutation {
  addSectionsToDashboard(input: AddSectionsToDashboardInput!): Dashboard!
  setSectionsOnDashboard(input: SetSectionsOnDashboardInput!): Dashboard!
  removeSectionsFromDashboard(input: RemoveSectionsFromDashboardInput!): Dashboard!
  createOneDashboard(input: CreateOneDashboardInput!): Dashboard!
  updateOneDashboard(input: UpdateOneDashboardInput!): Dashboard!
  deleteOneDashboard(input: DeleteOneDashboardInput!): DashboardDeleteResponse!
  addGraphsToSection(input: AddGraphsToSectionInput!): Section!
  setGraphsOnSection(input: SetGraphsOnSectionInput!): Section!
  removeGraphsFromSection(input: RemoveGraphsFromSectionInput!): Section!
  createOneSection(input: CreateOneSectionInput!): Section!
  updateOneSection(input: UpdateOneSectionInput!): Section!
  deleteOneSection(input: DeleteOneSectionInput!): SectionDeleteResponse!
  createOneGraph(input: CreateOneGraphInput!): Graph!
  createManyGraphs(input: CreateManyGraphsInput!): [Graph!]!
  updateOneGraph(input: UpdateOneGraphInput!): Graph!
  updateManyGraphs(input: UpdateManyGraphsInput!): UpdateManyResponse!
  deleteOneGraph(input: DeleteOneGraphInput!): GraphDeleteResponse!
  deleteManyGraphs(input: DeleteManyGraphsInput!): DeleteManyResponse!
  createOneFbPage(input: CreateOneFbPageInput!): FbPage!
  updateOneFbPage(input: UpdateOneFbPageInput!): FbPage!
  deleteOneFbPage(input: DeleteOneFbPageInput!): FbPageDeleteResponse!
  createOneGraphLayout(input: CreateOneGraphLayoutInput!): GraphLayout!
  updateOneGraphLayout(input: UpdateOneGraphLayoutInput!): GraphLayout!
  createOneGAnalyticsSource(input: CreateOneGAnalyticsSourceInput!): GAnalyticsSource!
  updateOneGAnalyticsSource(input: UpdateOneGAnalyticsSourceInput!): GAnalyticsSource!
  createOneFbInsightsSource(input: CreateOneFbInsightsSourceInput!): FbInsightsSource!
  updateOneFbInsightsSource(input: UpdateOneFbInsightsSourceInput!): FbInsightsSource!
  createUserLongToken(createUserLongTokenInput: CreateUserLongTokenInput!): FbUser!
  createPageLongToken(createPageLongTokenInput: CreatePageLongTokenInput!): FbPage!
  removePageLongToken(pageId: String!): FbPage!
  removeUserLongToken(userId: String!): FbUser!
  addFbPagesToFbUser(input: AddFbPagesToFbUserInput!): FbUser!
  setFbPagesOnFbUser(input: SetFbPagesOnFbUserInput!): FbUser!
  removeFbPagesFromFbUser(input: RemoveFbPagesFromFbUserInput!): FbUser!
  createOneFbUser(input: CreateOneFbUserInput!): FbUser!
  updateOneFbUser(input: UpdateOneFbUserInput!): FbUser!
  deleteOneFbUser(input: DeleteOneFbUserInput!): FbUserDeleteResponse!
}

input AddSectionsToDashboardInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetSectionsOnDashboardInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveSectionsFromDashboardInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneDashboardInput {
  """The record to create"""
  dashboard: CreateDashboard!
}

input CreateDashboard {
  """Dashboard  name"""
  name: String!
  description: String
}

input UpdateOneDashboardInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDashboard!
}

input UpdateDashboard {
  """Dashboard  name"""
  name: String
  description: String
}

input DeleteOneDashboardInput {
  """The id of the record to delete."""
  id: ID!
}

input AddGraphsToSectionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetGraphsOnSectionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveGraphsFromSectionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneSectionInput {
  """The record to create"""
  section: CreateSection!
}

input CreateSection {
  """Section name"""
  name: String!

  """Section description"""
  description: String

  """ID of the parent dashboard"""
  dashboardId: ID!
}

input UpdateOneSectionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSection!
}

input UpdateSection {
  """Section name"""
  name: String

  """Section description"""
  description: String

  """ID of the parent dashboard"""
  dashboardId: ID
}

input DeleteOneSectionInput {
  """The id of the record to delete."""
  id: ID!
}

input CreateOneGraphInput {
  """The record to create"""
  graph: CreateGraph!
}

input CreateGraph {
  """Graph  name"""
  name: String!
  description: String
  sectionId: ID!

  """ID of the graph layout"""
  graphLayoutId: ID!

  """ID of the FB Insights Source"""
  fbInsightsSourceId: ID

  """ID of the Google Analytics Source"""
  gAnalyticsSourceId: ID

  """Type of the graph source"""
  graphSourceType: GraphSourceType!
  graphType: String!
}

input CreateManyGraphsInput {
  """Array of records to create"""
  graphs: [CreateGraph!]!
}

input UpdateOneGraphInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateGraph!
}

input UpdateGraph {
  """Graph  name"""
  name: String
  description: String
  sectionId: ID

  """Type of the graph source"""
  graphSourceType: GraphSourceType
  graphType: String
}

input UpdateManyGraphsInput {
  """Filter used to find fields to update"""
  filter: GraphUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateGraph!
}

input GraphUpdateFilter {
  and: [GraphUpdateFilter!]
  or: [GraphUpdateFilter!]
  id: GraphIdFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: GraphNameFilterComparison
}

input DeleteOneGraphInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyGraphsInput {
  """Filter to find records to delete"""
  filter: GraphDeleteFilter!
}

input GraphDeleteFilter {
  and: [GraphDeleteFilter!]
  or: [GraphDeleteFilter!]
  id: GraphIdFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: GraphNameFilterComparison
}

input CreateOneFbPageInput {
  """The record to create"""
  fbPage: CreateFbPage!
}

input CreateFbPage {
  """FbPage  name"""
  name: String!

  """FB Internal Id of the page"""
  fbInternalPageId: String!

  """Fb user id"""
  fbUserId: ID!

  """Long lived token"""
  token: String

  """Expiration date"""
  tokenExpiryDate: Date
}

input UpdateOneFbPageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFbPage!
}

input UpdateFbPage {
  """FbPage  name"""
  name: String

  """FB Internal Id of the page"""
  fbInternalPageId: String

  """Fb user id"""
  fbUserId: ID

  """Long lived token"""
  token: String

  """Expiration date"""
  tokenExpiryDate: Date
}

input DeleteOneFbPageInput {
  """The id of the record to delete."""
  id: ID!
}

input CreateOneGraphLayoutInput {
  """The record to create"""
  graphLayout: CreateGraphLayout!
}

input CreateGraphLayout {
  """GraphLayout  name"""
  name: String!
  description: String
}

input UpdateOneGraphLayoutInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateGraphLayout!
}

input UpdateGraphLayout {
  """GraphLayout  name"""
  name: String
  description: String
}

input CreateOneGAnalyticsSourceInput {
  """The record to create"""
  gAnalyticsSource: CreateGAnalyticsSource!
}

input CreateGAnalyticsSource {
  """GAnalyticsSource  name"""
  name: String!
  description: String
}

input UpdateOneGAnalyticsSourceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateGAnalyticsSource!
}

input UpdateGAnalyticsSource {
  """GAnalyticsSource  name"""
  name: String
  description: String
}

input CreateOneFbInsightsSourceInput {
  """The record to create"""
  fbInsightsSource: CreateFbInsightsSource!
}

input CreateFbInsightsSource {
  metric: [String!]!
  period: FbDatePreset
  since: String
  until: String
  datePreset: FbDatePreset
  show_description_from_api_doc: Boolean = false
  fbPageId: ID!
}

input UpdateOneFbInsightsSourceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFbInsightsSource!
}

input UpdateFbInsightsSource {
  metric: [String!]
  period: FbDatePreset
  since: String
  until: String
  datePreset: FbDatePreset
  show_description_from_api_doc: Boolean = false
  fbPageId: ID
}

input CreateUserLongTokenInput {
  """User ID"""
  fbUserId: String!

  """Short Lived User Token"""
  fbUserShortToken: String!
}

input CreatePageLongTokenInput {
  """User Id"""
  fbUserId: ID

  """Fb internal user Id"""
  fbInternalUserId: String

  """Page Id"""
  fbPageId: ID!

  """Fb internal page Id"""
  fbInternalPageId: String

  """Long Lived User Token"""
  userLongToken: String
}

input AddFbPagesToFbUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetFbPagesOnFbUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveFbPagesFromFbUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneFbUserInput {
  """The record to create"""
  fbUser: CreateFbUser!
}

input CreateFbUser {
  """FbUser  name"""
  name: String!
  description: String

  """FB Internal Id of the page"""
  fbInternalUserId: String!

  """Long lived token"""
  token: String

  """Expiration date"""
  tokenExpiryDate: Date
}

input UpdateOneFbUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFbUser!
}

input UpdateFbUser {
  """FbUser  name"""
  name: String
  description: String

  """FB Internal Id of the page"""
  fbInternalUserId: String

  """Long lived token"""
  token: String

  """Expiration date"""
  tokenExpiryDate: Date
}

input DeleteOneFbUserInput {
  """The id of the record to delete."""
  id: ID!
}